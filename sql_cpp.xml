<?xml version="1.0" encoding="UTF-8"?>

<AnalyzerReport platform_name="ubuntu-16.04-64" package_root_dir="pkg1" tool_version="1.75" package_name="SQLite" assess_fw_version="1.1.22" parser_fw_version="3.1.8" assessment_start_ts="1559038452.817735" parser_fw="resultparser" build_fw_version="1.1.22" build_root_dir="/home/builder/build" build_fw="c-assess" assess_fw="c-assess" tool_name="cppcheck" package_version="3.20999999999999996447" uuid="05978e40-2fbd-4b1c-bbc7-cbbdacc588b2">
  <BugInstance id="0">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>1495</StartLine>
        <EndLine>1495</EndLine>
        <Explanation>Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>warning</BugGroup>
    <BugCode>uselessAssignmentPtrArg</BugCode>
    <BugMessage>Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[0]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="1">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>2008</StartLine>
        <EndLine>2008</EndLine>
        <Explanation>Casting between integer* and double* which have an incompatible binary data representation.</Explanation>
      </Location>
    </BugLocations>
    <CweId>704</CweId>
    <BugGroup>portability</BugGroup>
    <BugCode>invalidPointerCast</BugCode>
    <BugMessage>Casting between integer* and double* which have an incompatible binary data representation.</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[1]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="2">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>824</StartLine>
        <EndLine>824</EndLine>
        <Explanation>The scope of the variable 's1' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 's1' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:824 ****** Primary Bug Location
  The scope of the variable 's1' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[2]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="3">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>1360</StartLine>
        <EndLine>1360</EndLine>
        <Explanation>The scope of the variable 'dot' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'dot' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:1360 ****** Primary Bug Location
  The scope of the variable 'dot' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[3]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="4">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>1888</StartLine>
        <EndLine>1888</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:1888 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[4]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="5">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>1889</StartLine>
        <EndLine>1889</EndLine>
        <Explanation>The scope of the variable 'dashdash' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'dashdash' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:1889 ****** Primary Bug Location
  The scope of the variable 'dashdash' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[5]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="6">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>1945</StartLine>
        <EndLine>1945</EndLine>
        <Explanation>The scope of the variable 'lv' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'lv' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:1945 ****** Primary Bug Location
  The scope of the variable 'lv' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[6]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="7">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>1946</StartLine>
        <EndLine>1946</EndLine>
        <Explanation>The scope of the variable 'dv' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'dv' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:1946 ****** Primary Bug Location
  The scope of the variable 'dv' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[7]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="8">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>2056</StartLine>
        <EndLine>2056</EndLine>
        <Explanation>The scope of the variable 'dashdash' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'dashdash' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:2056 ****** Primary Bug Location
  The scope of the variable 'dashdash' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[8]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="9">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>2057</StartLine>
        <EndLine>2057</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:2057 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[9]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="10">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>2083</StartLine>
        <EndLine>2083</EndLine>
        <Explanation>The scope of the variable 'len' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'len' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:2083 ****** Primary Bug Location
  The scope of the variable 'len' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[10]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="11">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>2554</StartLine>
        <EndLine>2554</EndLine>
        <Explanation>The scope of the variable 'nBack' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nBack' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:2554 ****** Primary Bug Location
  The scope of the variable 'nBack' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[11]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="12">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>3029</StartLine>
        <EndLine>3029</EndLine>
        <Explanation>The scope of the variable 'len' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'len' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:3029 ****** Primary Bug Location
  The scope of the variable 'len' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[12]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="13">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>3075</StartLine>
        <EndLine>3075</EndLine>
        <Explanation>The scope of the variable 'sp' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'sp' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:3075 ****** Primary Bug Location
  The scope of the variable 'sp' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[13]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="14">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>3220</StartLine>
        <EndLine>3220</EndLine>
        <Explanation>The scope of the variable 'buf' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'buf' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:3220 ****** Primary Bug Location
  The scope of the variable 'buf' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[14]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="15">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>3246</StartLine>
        <EndLine>3246</EndLine>
        <Explanation>The scope of the variable 'j' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'j' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:3246 ****** Primary Bug Location
  The scope of the variable 'j' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[15]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="16">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>3272</StartLine>
        <EndLine>3272</EndLine>
        <Explanation>The scope of the variable 'pathlist' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pathlist' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:3272 ****** Primary Bug Location
  The scope of the variable 'pathlist' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[16]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="17">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>3273</StartLine>
        <EndLine>3273</EndLine>
        <Explanation>The scope of the variable 'pathbufptr' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pathbufptr' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:3273 ****** Primary Bug Location
  The scope of the variable 'pathbufptr' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[17]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="18">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>3351</StartLine>
        <EndLine>3351</EndLine>
        <Explanation>The scope of the variable 'iStart' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iStart' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:3351 ****** Primary Bug Location
  The scope of the variable 'iStart' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[18]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="19">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>3533</StartLine>
        <EndLine>3533</EndLine>
        <Explanation>The scope of the variable 'empty' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'empty' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:3533 ****** Primary Bug Location
  The scope of the variable 'empty' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[19]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="20">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>3537</StartLine>
        <EndLine>3537</EndLine>
        <Explanation>The scope of the variable 'c' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'c' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:3537 ****** Primary Bug Location
  The scope of the variable 'c' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[20]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="21">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>4527</StartLine>
        <EndLine>4527</EndLine>
        <Explanation>The scope of the variable 'line' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'line' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:4527 ****** Primary Bug Location
  The scope of the variable 'line' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[21]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="22">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>4528</StartLine>
        <EndLine>4528</EndLine>
        <Explanation>The scope of the variable 'pattern' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pattern' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:4528 ****** Primary Bug Location
  The scope of the variable 'pattern' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[22]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="23">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>4570</StartLine>
        <EndLine>4570</EndLine>
        <Explanation>The scope of the variable 'nbest' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nbest' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:4570 ****** Primary Bug Location
  The scope of the variable 'nbest' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[23]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="24">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>4572</StartLine>
        <EndLine>4572</EndLine>
        <Explanation>The scope of the variable 'usesWildcard' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'usesWildcard' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:4572 ****** Primary Bug Location
  The scope of the variable 'usesWildcard' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[24]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="25">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>5145</StartLine>
        <EndLine>5145</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:5145 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[25]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="26">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>5324</StartLine>
        <EndLine>5324</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/tool/lemon.c:5324 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[26]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="27">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>1546</StartLine>
        <EndLine>1546</EndLine>
        <Explanation>Array 'x[32]' accessed at index 32, which is out of bounds.</Explanation>
      </Location>
    </BugLocations>
    <CweId>119</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>arrayIndexOutOfBounds</BugCode>
    <BugMessage>Array 'x[32]' accessed at index 32, which is out of bounds.</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[27]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="28">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>2800</StartLine>
        <EndLine>2800</EndLine>
        <Explanation>Memory leak: filebuf</Explanation>
      </Location>
    </BugLocations>
    <CweId>401</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>memleak</BugCode>
    <BugMessage>Memory leak: filebuf</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[28]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="29">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>906</StartLine>
        <EndLine>906</EndLine>
        <Explanation>Return value of allocation function 'getstate' is not stored.</Explanation>
      </Location>
    </BugLocations>
    <CweId>771</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>leakReturnValNotUsed</BugCode>
    <BugMessage>Return value of allocation function 'getstate' is not stored.</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[29]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="30">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>1626</StartLine>
        <EndLine>1626</EndLine>
        <Explanation>Return value of allocation function 'Symbol_new' is not stored.</Explanation>
      </Location>
    </BugLocations>
    <CweId>771</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>leakReturnValNotUsed</BugCode>
    <BugMessage>Return value of allocation function 'Symbol_new' is not stored.</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[30]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="31">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>1639</StartLine>
        <EndLine>1639</EndLine>
        <Explanation>Return value of allocation function 'Symbol_new' is not stored.</Explanation>
      </Location>
    </BugLocations>
    <CweId>771</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>leakReturnValNotUsed</BugCode>
    <BugMessage>Return value of allocation function 'Symbol_new' is not stored.</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[31]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="32">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>2647</StartLine>
        <EndLine>2647</EndLine>
        <Explanation>Return value of allocation function 'Symbol_new' is not stored.</Explanation>
      </Location>
    </BugLocations>
    <CweId>771</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>leakReturnValNotUsed</BugCode>
    <BugMessage>Return value of allocation function 'Symbol_new' is not stored.</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[32]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="33">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>3553</StartLine>
        <EndLine>3553</EndLine>
        <Explanation>Common realloc mistake: 'z' nulled but not freed upon failure</Explanation>
      </Location>
    </BugLocations>
    <CweId>401</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>memleakOnRealloc</BugCode>
    <BugMessage>Common realloc mistake: 'z' nulled but not freed upon failure</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[33]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="34">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>2544</StartLine>
        <EndLine>2544</EndLine>
        <Explanation>Memory leak: sp</Explanation>
      </Location>
    </BugLocations>
    <CweId>401</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>memleak</BugCode>
    <BugMessage>Memory leak: sp</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[34]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="35">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/tool/lemon.c</SourceFile>
        <StartLine>3426</StartLine>
        <EndLine>3426</EndLine>
        <Explanation>Memory leak: tpltname</Explanation>
      </Location>
    </BugLocations>
    <CweId>401</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>memleak</BugCode>
    <BugMessage>Memory leak: tpltname</BugMessage>
    <BugTrace>
      <BuildId>2</BuildId>
      <AssessmentReportFile>assessment_report2.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[35]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="36">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>78417</StartLine>
        <EndLine>78417</EndLine>
        <Explanation>Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>warning</BugGroup>
    <BugCode>uselessAssignmentPtrArg</BugCode>
    <BugMessage>Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[0]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="37">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>53022</StartLine>
        <EndLine>53022</EndLine>
        <Explanation>Redundant condition: If 'pgno == 0', the comparison 'pgno &lt;= 1' is always true.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>redundantCondition</BugCode>
    <BugMessage>Redundant condition: If 'pgno == 0', the comparison 'pgno &lt;= 1' is always true.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[1]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="38">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>54990</StartLine>
        <EndLine>54990</EndLine>
        <Explanation>Possible null pointer dereference: pbOpen</Explanation>
      </Location>
    </BugLocations>
    <CweId>476</CweId>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointer</BugCode>
    <BugMessage>Possible null pointer dereference: pbOpen</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[2]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="39">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>61972</StartLine>
        <EndLine>61972</EndLine>
        <Explanation>Possible null pointer dereference: zFilename</Explanation>
      </Location>
    </BugLocations>
    <CweId>476</CweId>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointer</BugCode>
    <BugMessage>Possible null pointer dereference: zFilename</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[3]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="40">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95300</StartLine>
        <EndLine>95300</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95300 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[4]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="41">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95313</StartLine>
        <EndLine>95313</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95313 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[5]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="42">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95317</StartLine>
        <EndLine>95317</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95317 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[6]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="43">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95324</StartLine>
        <EndLine>95324</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95324 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[7]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="44">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95325</StartLine>
        <EndLine>95325</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95325 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[8]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="45">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95326</StartLine>
        <EndLine>95326</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95326 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[9]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="46">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95335</StartLine>
        <EndLine>95335</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95335 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[10]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="47">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95341</StartLine>
        <EndLine>95341</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95341 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[11]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="48">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95368</StartLine>
        <EndLine>95368</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95368 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[12]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="49">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95369</StartLine>
        <EndLine>95369</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95369 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[13]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="50">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95370</StartLine>
        <EndLine>95370</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95370 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[14]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="51">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95378</StartLine>
        <EndLine>95378</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95378 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[15]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="52">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95383</StartLine>
        <EndLine>95383</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95383 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[16]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="53">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95389</StartLine>
        <EndLine>95389</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95389 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[17]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="54">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95406</StartLine>
        <EndLine>95406</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95406 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[18]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="55">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95411</StartLine>
        <EndLine>95411</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95411 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[19]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="56">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95412</StartLine>
        <EndLine>95412</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95412 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[20]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="57">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95448</StartLine>
        <EndLine>95448</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95448 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[21]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="58">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95449</StartLine>
        <EndLine>95449</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95449 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[22]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="59">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95456</StartLine>
        <EndLine>95456</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95456 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[23]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="60">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95472</StartLine>
        <EndLine>95472</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95472 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[24]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="61">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95482</StartLine>
        <EndLine>95482</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95482 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[25]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="62">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95493</StartLine>
        <EndLine>95493</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95493 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[26]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="63">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95503</StartLine>
        <EndLine>95503</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95503 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[27]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="64">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95506</StartLine>
        <EndLine>95506</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95506 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[28]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="65">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95999</StartLine>
        <EndLine>95999</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95508</StartLine>
        <EndLine>95508</EndLine>
        <Explanation>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95999 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:95508 ****** Primary Bug Location
  Either the condition 'pExpr' is redundant or there is possible null pointer dereference: pExpr.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[29]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="66">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>99310</StartLine>
        <EndLine>99310</EndLine>
        <Explanation>Possible null pointer dereference: pName2</Explanation>
      </Location>
    </BugLocations>
    <CweId>476</CweId>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointer</BugCode>
    <BugMessage>Possible null pointer dereference: pName2</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[30]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="67">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>99317</StartLine>
        <EndLine>99317</EndLine>
        <Explanation>Possible null pointer dereference: pName2</Explanation>
      </Location>
    </BugLocations>
    <CweId>476</CweId>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointer</BugCode>
    <BugMessage>Possible null pointer dereference: pName2</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[31]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="68">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>101456</StartLine>
        <EndLine>101456</EndLine>
        <Explanation>Possible null pointer dereference: pName2</Explanation>
      </Location>
    </BugLocations>
    <CweId>476</CweId>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointer</BugCode>
    <BugMessage>Possible null pointer dereference: pName2</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[32]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="69">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>103651</StartLine>
        <EndLine>103651</EndLine>
        <Explanation>Possible null pointer dereference: pName2</Explanation>
      </Location>
    </BugLocations>
    <CweId>476</CweId>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointer</BugCode>
    <BugMessage>Possible null pointer dereference: pName2</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[33]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="70">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>118479</StartLine>
        <EndLine>118479</EndLine>
        <Explanation>Possible null pointer dereference: pDistinct</Explanation>
      </Location>
    </BugLocations>
    <CweId>476</CweId>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointer</BugCode>
    <BugMessage>Possible null pointer dereference: pDistinct</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[34]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="71">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>181416</StartLine>
        <EndLine>181416</EndLine>
        <Explanation>Possible null pointer dereference: aReplace</Explanation>
      </Location>
    </BugLocations>
    <CweId>476</CweId>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointer</BugCode>
    <BugMessage>Possible null pointer dereference: aReplace</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[35]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="72">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>208069</StartLine>
        <EndLine>208069</EndLine>
        <Explanation>Either the condition 'z==0' is redundant or there is possible null pointer dereference: z.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>208065</StartLine>
        <EndLine>208065</EndLine>
        <Explanation>Either the condition 'z==0' is redundant or there is possible null pointer dereference: z.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'z==0' is redundant or there is possible null pointer dereference: z.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:208069 ****** Primary Bug Location
  Either the condition 'z==0' is redundant or there is possible null pointer dereference: z.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:208065 ****** Primary Bug Location
  Either the condition 'z==0' is redundant or there is possible null pointer dereference: z.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[36]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="73">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>208195</StartLine>
        <EndLine>208195</EndLine>
        <Explanation>Either the condition 'pArg' is redundant or there is possible null pointer dereference: pArg.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>208252</StartLine>
        <EndLine>208252</EndLine>
        <Explanation>Either the condition 'pArg' is redundant or there is possible null pointer dereference: pArg.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'pArg' is redundant or there is possible null pointer dereference: pArg.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:208195 ****** Primary Bug Location
  Either the condition 'pArg' is redundant or there is possible null pointer dereference: pArg.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:208252 ****** Primary Bug Location
  Either the condition 'pArg' is redundant or there is possible null pointer dereference: pArg.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[37]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="74">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>208635</StartLine>
        <EndLine>208635</EndLine>
        <Explanation>Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>208423</StartLine>
        <EndLine>208423</EndLine>
        <Explanation>Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:208635 ****** Primary Bug Location
  Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:208423 ****** Primary Bug Location
  Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[38]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="75">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>208635</StartLine>
        <EndLine>208635</EndLine>
        <Explanation>Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>208424</StartLine>
        <EndLine>208424</EndLine>
        <Explanation>Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:208635 ****** Primary Bug Location
  Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:208424 ****** Primary Bug Location
  Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[39]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="76">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>208635</StartLine>
        <EndLine>208635</EndLine>
        <Explanation>Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>208425</StartLine>
        <EndLine>208425</EndLine>
        <Explanation>Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:208635 ****** Primary Bug Location
  Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:208425 ****** Primary Bug Location
  Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[40]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="77">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>208635</StartLine>
        <EndLine>208635</EndLine>
        <Explanation>Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>208426</StartLine>
        <EndLine>208426</EndLine>
        <Explanation>Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:208635 ****** Primary Bug Location
  Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:208426 ****** Primary Bug Location
  Either the condition 'if(pArg&amp;&amp;pArg.statsOn)' is redundant or there is possible null pointer dereference: p.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[41]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="78">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>212648</StartLine>
        <EndLine>212648</EndLine>
        <Explanation>Either the condition 'zLine' is redundant or there is possible null pointer dereference: zLine.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>212549</StartLine>
        <EndLine>212549</EndLine>
        <Explanation>Either the condition 'zLine' is redundant or there is possible null pointer dereference: zLine.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>warning</BugGroup>
    <BugCode>nullPointerRedundantCheck</BugCode>
    <BugMessage>Either the condition 'zLine' is redundant or there is possible null pointer dereference: zLine.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:212648 ****** Primary Bug Location
  Either the condition 'zLine' is redundant or there is possible null pointer dereference: zLine.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:212549 ****** Primary Bug Location
  Either the condition 'zLine' is redundant or there is possible null pointer dereference: zLine.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[42]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="79">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>46381</StartLine>
        <EndLine>46381</EndLine>
        <Explanation>Variable 'pGroup.nMaxPage' is reassigned a value before the old one has been used.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>46379</StartLine>
        <EndLine>46379</EndLine>
        <Explanation>Variable 'pGroup.nMaxPage' is reassigned a value before the old one has been used.</Explanation>
      </Location>
    </BugLocations>
    <CweId>563</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>redundantAssignment</BugCode>
    <BugMessage>Variable 'pGroup.nMaxPage' is reassigned a value before the old one has been used.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:46381 ****** Primary Bug Location
  Variable 'pGroup.nMaxPage' is reassigned a value before the old one has been used.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:46379 ****** Primary Bug Location
  Variable 'pGroup.nMaxPage' is reassigned a value before the old one has been used.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[43]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="80">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>86017</StartLine>
        <EndLine>86017</EndLine>
        <Explanation>Variable 'db.vtabOnConflict' is reassigned a value before the old one has been used.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>86015</StartLine>
        <EndLine>86015</EndLine>
        <Explanation>Variable 'db.vtabOnConflict' is reassigned a value before the old one has been used.</Explanation>
      </Location>
    </BugLocations>
    <CweId>563</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>redundantAssignment</BugCode>
    <BugMessage>Variable 'db.vtabOnConflict' is reassigned a value before the old one has been used.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:86017 ****** Primary Bug Location
  Variable 'db.vtabOnConflict' is reassigned a value before the old one has been used.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:86015 ****** Primary Bug Location
  Variable 'db.vtabOnConflict' is reassigned a value before the old one has been used.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[44]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="81">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>91185</StartLine>
        <EndLine>91185</EndLine>
        <Explanation>Variable 'db.suppressErr' is reassigned a value before the old one has been used.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>91183</StartLine>
        <EndLine>91183</EndLine>
        <Explanation>Variable 'db.suppressErr' is reassigned a value before the old one has been used.</Explanation>
      </Location>
    </BugLocations>
    <CweId>563</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>redundantAssignment</BugCode>
    <BugMessage>Variable 'db.suppressErr' is reassigned a value before the old one has been used.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:91185 ****** Primary Bug Location
  Variable 'db.suppressErr' is reassigned a value before the old one has been used.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:91183 ****** Primary Bug Location
  Variable 'db.suppressErr' is reassigned a value before the old one has been used.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[45]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="82">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>102908</StartLine>
        <EndLine>102908</EndLine>
        <Explanation>Variable 'db.xAuth' is reassigned a value before the old one has been used.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>102906</StartLine>
        <EndLine>102906</EndLine>
        <Explanation>Variable 'db.xAuth' is reassigned a value before the old one has been used.</Explanation>
      </Location>
    </BugLocations>
    <CweId>563</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>redundantAssignment</BugCode>
    <BugMessage>Variable 'db.xAuth' is reassigned a value before the old one has been used.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:102908 ****** Primary Bug Location
  Variable 'db.xAuth' is reassigned a value before the old one has been used.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:102906 ****** Primary Bug Location
  Variable 'db.xAuth' is reassigned a value before the old one has been used.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[46]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="83">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>122125</StartLine>
        <EndLine>122125</EndLine>
        <Explanation>Variable 'pTab.nCol' is reassigned a value before the old one has been used.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>122123</StartLine>
        <EndLine>122123</EndLine>
        <Explanation>Variable 'pTab.nCol' is reassigned a value before the old one has been used.</Explanation>
      </Location>
    </BugLocations>
    <CweId>563</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>redundantAssignment</BugCode>
    <BugMessage>Variable 'pTab.nCol' is reassigned a value before the old one has been used.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:122125 ****** Primary Bug Location
  Variable 'pTab.nCol' is reassigned a value before the old one has been used.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:122123 ****** Primary Bug Location
  Variable 'pTab.nCol' is reassigned a value before the old one has been used.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[47]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="84">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>128618</StartLine>
        <EndLine>128618</EndLine>
        <Explanation>Variable 'pSelect.pEList' is reassigned a value before the old one has been used.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>128613</StartLine>
        <EndLine>128613</EndLine>
        <Explanation>Variable 'pSelect.pEList' is reassigned a value before the old one has been used.</Explanation>
      </Location>
    </BugLocations>
    <CweId>563</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>redundantAssignment</BugCode>
    <BugMessage>Variable 'pSelect.pEList' is reassigned a value before the old one has been used.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:128618 ****** Primary Bug Location
  Variable 'pSelect.pEList' is reassigned a value before the old one has been used.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:128613 ****** Primary Bug Location
  Variable 'pSelect.pEList' is reassigned a value before the old one has been used.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[48]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="85">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>212115</StartLine>
        <EndLine>212115</EndLine>
        <Explanation>Variable 'rc' is reassigned a value before the old one has been used.</Explanation>
      </Location>
      <Location id="2" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>212113</StartLine>
        <EndLine>212113</EndLine>
        <Explanation>Variable 'rc' is reassigned a value before the old one has been used.</Explanation>
      </Location>
    </BugLocations>
    <CweId>563</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>redundantAssignment</BugCode>
    <BugMessage>Variable 'rc' is reassigned a value before the old one has been used.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:212115 ****** Primary Bug Location
  Variable 'rc' is reassigned a value before the old one has been used.
*** pkg1/sqlite-3.21-buggy/sqlite3.c:212113 ****** Primary Bug Location
  Variable 'rc' is reassigned a value before the old one has been used.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[49]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="86">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>82986</StartLine>
        <EndLine>82986</EndLine>
        <Explanation>Consecutive return, break, continue, goto or throw statements are unnecessary.</Explanation>
      </Location>
    </BugLocations>
    <CweId>561</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>duplicateBreak</BugCode>
    <BugMessage>Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:82986 ****** Primary Bug Location
  Consecutive return, break, continue, goto or throw statements are unnecessary.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[50]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="87">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>20317</StartLine>
        <EndLine>20317</EndLine>
        <Explanation>The scope of the variable 'n' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'n' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:20317 ****** Primary Bug Location
  The scope of the variable 'n' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[51]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="88">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>25719</StartLine>
        <EndLine>25719</EndLine>
        <Explanation>The scope of the variable 'flag_leftjustify' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'flag_leftjustify' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:25719 ****** Primary Bug Location
  The scope of the variable 'flag_leftjustify' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[52]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="89">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>25720</StartLine>
        <EndLine>25720</EndLine>
        <Explanation>The scope of the variable 'flag_prefix' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'flag_prefix' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:25720 ****** Primary Bug Location
  The scope of the variable 'flag_prefix' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[53]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="90">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>25721</StartLine>
        <EndLine>25721</EndLine>
        <Explanation>The scope of the variable 'flag_alternateform' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'flag_alternateform' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:25721 ****** Primary Bug Location
  The scope of the variable 'flag_alternateform' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[54]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="91">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>25722</StartLine>
        <EndLine>25722</EndLine>
        <Explanation>The scope of the variable 'flag_altform2' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'flag_altform2' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:25722 ****** Primary Bug Location
  The scope of the variable 'flag_altform2' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[55]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="92">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>25723</StartLine>
        <EndLine>25723</EndLine>
        <Explanation>The scope of the variable 'flag_zeropad' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'flag_zeropad' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:25723 ****** Primary Bug Location
  The scope of the variable 'flag_zeropad' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[56]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="93">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>25725</StartLine>
        <EndLine>25725</EndLine>
        <Explanation>The scope of the variable 'done' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'done' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:25725 ****** Primary Bug Location
  The scope of the variable 'done' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[57]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="94">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>25726</StartLine>
        <EndLine>25726</EndLine>
        <Explanation>The scope of the variable 'cThousand' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'cThousand' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:25726 ****** Primary Bug Location
  The scope of the variable 'cThousand' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[58]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="95">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>25727</StartLine>
        <EndLine>25727</EndLine>
        <Explanation>The scope of the variable 'xtype' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'xtype' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:25727 ****** Primary Bug Location
  The scope of the variable 'xtype' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[59]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="96">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>29334</StartLine>
        <EndLine>29334</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:29334 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[60]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="97">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>29896</StartLine>
        <EndLine>29896</EndLine>
        <Explanation>The scope of the variable 'pEntry' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pEntry' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:29896 ****** Primary Bug Location
  The scope of the variable 'pEntry' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[61]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="98">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>34109</StartLine>
        <EndLine>34109</EndLine>
        <Explanation>The scope of the variable 'nWrite' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nWrite' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:34109 ****** Primary Bug Location
  The scope of the variable 'nWrite' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[62]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="99">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>35175</StartLine>
        <EndLine>35175</EndLine>
        <Explanation>The scope of the variable 'flags' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'flags' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:35175 ****** Primary Bug Location
  The scope of the variable 'flags' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[63]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="100">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>36627</StartLine>
        <EndLine>36627</EndLine>
        <Explanation>The scope of the variable 'got' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'got' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:36627 ****** Primary Bug Location
  The scope of the variable 'got' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[64]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="101">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>44476</StartLine>
        <EndLine>44476</EndLine>
        <Explanation>The scope of the variable 'j' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'j' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:44476 ****** Primary Bug Location
  The scope of the variable 'j' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[65]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="102">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>44477</StartLine>
        <EndLine>44477</EndLine>
        <Explanation>The scope of the variable 'rc' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'rc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:44477 ****** Primary Bug Location
  The scope of the variable 'rc' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[66]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="103">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>46079</StartLine>
        <EndLine>46079</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:46079 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[67]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="104">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>48551</StartLine>
        <EndLine>48551</EndLine>
        <Explanation>The scope of the variable 'p' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'p' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:48551 ****** Primary Bug Location
  The scope of the variable 'p' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[68]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="105">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>49045</StartLine>
        <EndLine>49045</EndLine>
        <Explanation>The scope of the variable 'aMagic' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'aMagic' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:49045 ****** Primary Bug Location
  The scope of the variable 'aMagic' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[69]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="106">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>50868</StartLine>
        <EndLine>50868</EndLine>
        <Explanation>The scope of the variable 'iHdrOff' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iHdrOff' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:50868 ****** Primary Bug Location
  The scope of the variable 'iHdrOff' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[70]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="107">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>55801</StartLine>
        <EndLine>55801</EndLine>
        <Explanation>The scope of the variable 'nativeCksum' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nativeCksum' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:55801 ****** Primary Bug Location
  The scope of the variable 'nativeCksum' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[71]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="108">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>56460</StartLine>
        <EndLine>56460</EndLine>
        <Explanation>The scope of the variable 'buf' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'buf' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:56460 ****** Primary Bug Location
  The scope of the variable 'buf' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[72]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="109">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>57985</StartLine>
        <EndLine>57985</EndLine>
        <Explanation>The scope of the variable 'cnt' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'cnt' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:57985 ****** Primary Bug Location
  The scope of the variable 'cnt' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[73]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="110">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>59548</StartLine>
        <EndLine>59548</EndLine>
        <Explanation>The scope of the variable 'p' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'p' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:59548 ****** Primary Bug Location
  The scope of the variable 'p' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[74]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="111">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>59564</StartLine>
        <EndLine>59564</EndLine>
        <Explanation>The scope of the variable 'p' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'p' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:59564 ****** Primary Bug Location
  The scope of the variable 'p' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[75]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="112">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>60272</StartLine>
        <EndLine>60272</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:60272 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[76]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="113">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>61160</StartLine>
        <EndLine>61160</EndLine>
        <Explanation>The scope of the variable 'x' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'x' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:61160 ****** Primary Bug Location
  The scope of the variable 'x' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[77]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="114">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>61162</StartLine>
        <EndLine>61162</EndLine>
        <Explanation>The scope of the variable 'size' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'size' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:61162 ****** Primary Bug Location
  The scope of the variable 'size' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[78]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="115">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>61310</StartLine>
        <EndLine>61310</EndLine>
        <Explanation>The scope of the variable 'nFrag' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nFrag' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:61310 ****** Primary Bug Location
  The scope of the variable 'nFrag' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[79]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="116">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>61535</StartLine>
        <EndLine>61535</EndLine>
        <Explanation>The scope of the variable 'sz' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'sz' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:61535 ****** Primary Bug Location
  The scope of the variable 'sz' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[80]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="117">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>63276</StartLine>
        <EndLine>63276</EndLine>
        <Explanation>The scope of the variable 'nFreeList' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nFreeList' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:63276 ****** Primary Bug Location
  The scope of the variable 'nFreeList' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[81]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="118">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>63277</StartLine>
        <EndLine>63277</EndLine>
        <Explanation>The scope of the variable 'rc' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'rc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:63277 ****** Primary Bug Location
  The scope of the variable 'rc' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[82]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="119">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>64238</StartLine>
        <EndLine>64238</EndLine>
        <Explanation>The scope of the variable 'iIdx' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iIdx' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:64238 ****** Primary Bug Location
  The scope of the variable 'iIdx' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[83]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="120">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>64715</StartLine>
        <EndLine>64715</EndLine>
        <Explanation>The scope of the variable 'pgno' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pgno' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:64715 ****** Primary Bug Location
  The scope of the variable 'pgno' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[84]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="121">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>64740</StartLine>
        <EndLine>64740</EndLine>
        <Explanation>The scope of the variable 'pgno' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pgno' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:64740 ****** Primary Bug Location
  The scope of the variable 'pgno' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[85]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="122">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>64741</StartLine>
        <EndLine>64741</EndLine>
        <Explanation>The scope of the variable 'rc' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'rc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:64741 ****** Primary Bug Location
  The scope of the variable 'rc' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[86]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="123">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>66151</StartLine>
        <EndLine>66151</EndLine>
        <Explanation>The scope of the variable 'j' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'j' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:66151 ****** Primary Bug Location
  The scope of the variable 'j' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[87]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="124">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>66153</StartLine>
        <EndLine>66153</EndLine>
        <Explanation>The scope of the variable 'pIns' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pIns' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:66153 ****** Primary Bug Location
  The scope of the variable 'pIns' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[88]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="125">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>69961</StartLine>
        <EndLine>69961</EndLine>
        <Explanation>The scope of the variable 'destMode' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'destMode' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:69961 ****** Primary Bug Location
  The scope of the variable 'destMode' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[89]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="126">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>69962</StartLine>
        <EndLine>69962</EndLine>
        <Explanation>The scope of the variable 'pgszSrc' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pgszSrc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:69962 ****** Primary Bug Location
  The scope of the variable 'pgszSrc' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[90]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="127">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>69963</StartLine>
        <EndLine>69963</EndLine>
        <Explanation>The scope of the variable 'pgszDest' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pgszDest' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:69963 ****** Primary Bug Location
  The scope of the variable 'pgszDest' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[91]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="128">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>70214</StartLine>
        <EndLine>70214</EndLine>
        <Explanation>The scope of the variable 'pp' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pp' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:70214 ****** Primary Bug Location
  The scope of the variable 'pp' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[92]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="129">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>72586</StartLine>
        <EndLine>72586</EndLine>
        <Explanation>The scope of the variable 'buf' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'buf' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:72586 ****** Primary Bug Location
  The scope of the variable 'buf' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[93]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="130">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>73218</StartLine>
        <EndLine>73218</EndLine>
        <Explanation>The scope of the variable 'pOp' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pOp' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:73218 ****** Primary Bug Location
  The scope of the variable 'pOp' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[94]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="131">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>73354</StartLine>
        <EndLine>73354</EndLine>
        <Explanation>The scope of the variable 'ii' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'ii' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:73354 ****** Primary Bug Location
  The scope of the variable 'ii' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[95]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="132">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>73380</StartLine>
        <EndLine>73380</EndLine>
        <Explanation>The scope of the variable 'v2' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'v2' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:73380 ****** Primary Bug Location
  The scope of the variable 'v2' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[96]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="133">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>74729</StartLine>
        <EndLine>74729</EndLine>
        <Explanation>The scope of the variable 'rc2' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'rc2' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:74729 ****** Primary Bug Location
  The scope of the variable 'rc2' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[97]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="134">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>74811</StartLine>
        <EndLine>74811</EndLine>
        <Explanation>The scope of the variable 'rc' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'rc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:74811 ****** Primary Bug Location
  The scope of the variable 'rc' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[98]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="135">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>77676</StartLine>
        <EndLine>77676</EndLine>
        <Explanation>The scope of the variable 'rc' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'rc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:77676 ****** Primary Bug Location
  The scope of the variable 'rc' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[99]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="136">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>78241</StartLine>
        <EndLine>78241</EndLine>
        <Explanation>The scope of the variable 'pVar' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pVar' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:78241 ****** Primary Bug Location
  The scope of the variable 'pVar' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[100]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="137">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>78920</StartLine>
        <EndLine>78920</EndLine>
        <Explanation>The scope of the variable 'n' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'n' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:78920 ****** Primary Bug Location
  The scope of the variable 'n' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[101]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="138">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>81253</StartLine>
        <EndLine>81253</EndLine>
        <Explanation>The scope of the variable 'idx' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'idx' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:81253 ****** Primary Bug Location
  The scope of the variable 'idx' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[102]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="139">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>81254</StartLine>
        <EndLine>81254</EndLine>
        <Explanation>The scope of the variable 'pColl' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pColl' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:81254 ****** Primary Bug Location
  The scope of the variable 'pColl' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[103]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="140">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>81255</StartLine>
        <EndLine>81255</EndLine>
        <Explanation>The scope of the variable 'bRev' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'bRev' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:81255 ****** Primary Bug Location
  The scope of the variable 'bRev' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[104]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="141">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>86767</StartLine>
        <EndLine>86767</EndLine>
        <Explanation>The scope of the variable 'db' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'db' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:86767 ****** Primary Bug Location
  The scope of the variable 'db' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[105]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="142">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>87503</StartLine>
        <EndLine>87503</EndLine>
        <Explanation>The scope of the variable 'iBuf' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iBuf' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:87503 ****** Primary Bug Location
  The scope of the variable 'iBuf' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[106]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="143">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>87513</StartLine>
        <EndLine>87513</EndLine>
        <Explanation>The scope of the variable 'rc' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'rc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:87513 ****** Primary Bug Location
  The scope of the variable 'rc' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[107]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="144">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>87856</StartLine>
        <EndLine>87856</EndLine>
        <Explanation>The scope of the variable 'pgsz' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pgsz' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:87856 ****** Primary Bug Location
  The scope of the variable 'pgsz' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[108]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="145">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>87857</StartLine>
        <EndLine>87857</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:87857 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[109]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="146">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>88118</StartLine>
        <EndLine>88118</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:88118 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[110]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="147">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>88693</StartLine>
        <EndLine>88693</EndLine>
        <Explanation>The scope of the variable 'bFlush' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'bFlush' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:88693 ****** Primary Bug Location
  The scope of the variable 'bFlush' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[111]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="148">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>89427</StartLine>
        <EndLine>89427</EndLine>
        <Explanation>The scope of the variable 'iTask' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iTask' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:89427 ****** Primary Bug Location
  The scope of the variable 'iTask' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[112]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="149">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>90155</StartLine>
        <EndLine>90155</EndLine>
        <Explanation>The scope of the variable 'rc' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'rc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:90155 ****** Primary Bug Location
  The scope of the variable 'rc' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[113]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="150">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>90186</StartLine>
        <EndLine>90186</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:90186 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[114]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="151">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>90187</StartLine>
        <EndLine>90187</EndLine>
        <Explanation>The scope of the variable 'pItem' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pItem' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:90187 ****** Primary Bug Location
  The scope of the variable 'pItem' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[115]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="152">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>90222</StartLine>
        <EndLine>90222</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:90222 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[116]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="153">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>90223</StartLine>
        <EndLine>90223</EndLine>
        <Explanation>The scope of the variable 'pItem' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pItem' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:90223 ****** Primary Bug Location
  The scope of the variable 'pItem' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[117]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="154">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>90259</StartLine>
        <EndLine>90259</EndLine>
        <Explanation>The scope of the variable 'rc' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'rc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:90259 ****** Primary Bug Location
  The scope of the variable 'rc' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[118]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="155">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>91124</StartLine>
        <EndLine>91124</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:91124 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[119]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="156">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>91237</StartLine>
        <EndLine>91237</EndLine>
        <Explanation>The scope of the variable 'pEList' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pEList' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:91237 ****** Primary Bug Location
  The scope of the variable 'pEList' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[120]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="157">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>91265</StartLine>
        <EndLine>91265</EndLine>
        <Explanation>The scope of the variable 'pDup' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pDup' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:91265 ****** Primary Bug Location
  The scope of the variable 'pDup' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[121]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="158">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>91747</StartLine>
        <EndLine>91747</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:91747 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[122]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="159">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>93498</StartLine>
        <EndLine>93498</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:93498 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[123]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="160">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>94936</StartLine>
        <EndLine>94936</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:94936 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[124]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="161">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>94937</StartLine>
        <EndLine>94937</EndLine>
        <Explanation>The scope of the variable 'minLru' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'minLru' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:94937 ****** Primary Bug Location
  The scope of the variable 'minLru' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[125]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="162">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>94938</StartLine>
        <EndLine>94938</EndLine>
        <Explanation>The scope of the variable 'idxLru' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'idxLru' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:94938 ****** Primary Bug Location
  The scope of the variable 'idxLru' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[126]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="163">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95823</StartLine>
        <EndLine>95823</EndLine>
        <Explanation>The scope of the variable 'nextCase' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nextCase' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95823 ****** Primary Bug Location
  The scope of the variable 'nextCase' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[127]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="164">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>95996</StartLine>
        <EndLine>95996</EndLine>
        <Explanation>The scope of the variable 'inReg' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'inReg' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:95996 ****** Primary Bug Location
  The scope of the variable 'inReg' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[128]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="165">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>96084</StartLine>
        <EndLine>96084</EndLine>
        <Explanation>The scope of the variable 'j' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'j' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:96084 ****** Primary Bug Location
  The scope of the variable 'j' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[129]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="166">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>96508</StartLine>
        <EndLine>96508</EndLine>
        <Explanation>The scope of the variable 'iVar' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iVar' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:96508 ****** Primary Bug Location
  The scope of the variable 'iVar' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[130]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="167">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>96509</StartLine>
        <EndLine>96509</EndLine>
        <Explanation>The scope of the variable 'pL' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pL' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:96509 ****** Primary Bug Location
  The scope of the variable 'pL' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[131]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="168">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>96860</StartLine>
        <EndLine>96860</EndLine>
        <Explanation>The scope of the variable 'pCol' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pCol' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:96860 ****** Primary Bug Location
  The scope of the variable 'pCol' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[132]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="169">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>97005</StartLine>
        <EndLine>97005</EndLine>
        <Explanation>The scope of the variable 'pItem' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pItem' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:97005 ****** Primary Bug Location
  The scope of the variable 'pItem' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[133]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="170">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>97006</StartLine>
        <EndLine>97006</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:97006 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[134]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="171">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>97156</StartLine>
        <EndLine>97156</EndLine>
        <Explanation>The scope of the variable 'len' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'len' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:97156 ****** Primary Bug Location
  The scope of the variable 'len' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[135]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="172">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>97157</StartLine>
        <EndLine>97157</EndLine>
        <Explanation>The scope of the variable 'zRet' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zRet' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:97157 ****** Primary Bug Location
  The scope of the variable 'zRet' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[136]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="173">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>97277</StartLine>
        <EndLine>97277</EndLine>
        <Explanation>The scope of the variable 'dist' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'dist' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:97277 ****** Primary Bug Location
  The scope of the variable 'dist' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[137]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="174">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>97279</StartLine>
        <EndLine>97279</EndLine>
        <Explanation>The scope of the variable 'len' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'len' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:97279 ****** Primary Bug Location
  The scope of the variable 'len' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[138]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="175">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>97280</StartLine>
        <EndLine>97280</EndLine>
        <Explanation>The scope of the variable 'zRet' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zRet' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:97280 ****** Primary Bug Location
  The scope of the variable 'zRet' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[139]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="176">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>98906</StartLine>
        <EndLine>98906</EndLine>
        <Explanation>The scope of the variable 'jZeroRows' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'jZeroRows' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:98906 ****** Primary Bug Location
  The scope of the variable 'jZeroRows' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[140]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="177">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>99289</StartLine>
        <EndLine>99289</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:99289 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[141]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="178">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>99357</StartLine>
        <EndLine>99357</EndLine>
        <Explanation>The scope of the variable 'c' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'c' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:99357 ****** Primary Bug Location
  The scope of the variable 'c' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[142]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="179">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>99359</StartLine>
        <EndLine>99359</EndLine>
        <Explanation>The scope of the variable 'v' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'v' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:99359 ****** Primary Bug Location
  The scope of the variable 'v' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[143]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="180">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>99766</StartLine>
        <EndLine>99766</EndLine>
        <Explanation>The scope of the variable 'zSql' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zSql' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:99766 ****** Primary Bug Location
  The scope of the variable 'zSql' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[144]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="181">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>100560</StartLine>
        <EndLine>100560</EndLine>
        <Explanation>The scope of the variable 'iSrc' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iSrc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:100560 ****** Primary Bug Location
  The scope of the variable 'iSrc' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[145]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="182">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>101206</StartLine>
        <EndLine>101206</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:101206 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[146]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="183">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>101256</StartLine>
        <EndLine>101256</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:101256 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[147]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="184">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>101747</StartLine>
        <EndLine>101747</EndLine>
        <Explanation>The scope of the variable 'zType' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zType' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:101747 ****** Primary Bug Location
  The scope of the variable 'zType' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[148]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="185">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>101913</StartLine>
        <EndLine>101913</EndLine>
        <Explanation>The scope of the variable 'pCol' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pCol' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:101913 ****** Primary Bug Location
  The scope of the variable 'pCol' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[149]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="186">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>102597</StartLine>
        <EndLine>102597</EndLine>
        <Explanation>The scope of the variable 'n' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'n' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:102597 ****** Primary Bug Location
  The scope of the variable 'n' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[150]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="187">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>102842</StartLine>
        <EndLine>102842</EndLine>
        <Explanation>The scope of the variable 'n' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'n' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:102842 ****** Primary Bug Location
  The scope of the variable 'n' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[151]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="188">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>104481</StartLine>
        <EndLine>104481</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:104481 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[152]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="189">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>104482</StartLine>
        <EndLine>104482</EndLine>
        <Explanation>The scope of the variable 'pItem' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pItem' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:104482 ****** Primary Bug Location
  The scope of the variable 'pItem' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[153]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="190">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>104647</StartLine>
        <EndLine>104647</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:104647 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[154]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="191">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>104862</StartLine>
        <EndLine>104862</EndLine>
        <Explanation>The scope of the variable 'j' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'j' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:104862 ****** Primary Bug Location
  The scope of the variable 'j' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[155]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="192">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>105046</StartLine>
        <EndLine>105046</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:105046 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[156]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="193">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>105195</StartLine>
        <EndLine>105195</EndLine>
        <Explanation>The scope of the variable 'pColl2' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pColl2' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:105195 ****** Primary Bug Location
  The scope of the variable 'pColl2' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[157]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="194">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>105498</StartLine>
        <EndLine>105498</EndLine>
        <Explanation>The scope of the variable 'h' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'h' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:105498 ****** Primary Bug Location
  The scope of the variable 'h' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[158]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="195">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>106649</StartLine>
        <EndLine>106649</EndLine>
        <Explanation>The scope of the variable 'len' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'len' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:106649 ****** Primary Bug Location
  The scope of the variable 'len' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[159]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="196">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>106738</StartLine>
        <EndLine>106738</EndLine>
        <Explanation>The scope of the variable 'zHaystack' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zHaystack' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:106738 ****** Primary Bug Location
  The scope of the variable 'zHaystack' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[160]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="197">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>106739</StartLine>
        <EndLine>106739</EndLine>
        <Explanation>The scope of the variable 'zNeedle' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zNeedle' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:106739 ****** Primary Bug Location
  The scope of the variable 'zNeedle' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[161]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="198">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>106744</StartLine>
        <EndLine>106744</EndLine>
        <Explanation>The scope of the variable 'isText' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'isText' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:106744 ****** Primary Bug Location
  The scope of the variable 'isText' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[162]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="199">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>106786</StartLine>
        <EndLine>106786</EndLine>
        <Explanation>The scope of the variable 'n' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'n' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:106786 ****** Primary Bug Location
  The scope of the variable 'n' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[163]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="200">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>106972</StartLine>
        <EndLine>106972</EndLine>
        <Explanation>The scope of the variable 'z1' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'z1' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:106972 ****** Primary Bug Location
  The scope of the variable 'z1' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[164]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="201">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>106974</StartLine>
        <EndLine>106974</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:106974 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[165]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="202">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>106991</StartLine>
        <EndLine>106991</EndLine>
        <Explanation>The scope of the variable 'z1' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'z1' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:106991 ****** Primary Bug Location
  The scope of the variable 'z1' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[166]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="203">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>106993</StartLine>
        <EndLine>106993</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:106993 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[167]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="204">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>107583</StartLine>
        <EndLine>107583</EndLine>
        <Explanation>The scope of the variable 'j' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'j' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:107583 ****** Primary Bug Location
  The scope of the variable 'j' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[168]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="205">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>107678</StartLine>
        <EndLine>107678</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:107678 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[169]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="206">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>107816</StartLine>
        <EndLine>107816</EndLine>
        <Explanation>The scope of the variable 'flags' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'flags' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:107816 ****** Primary Bug Location
  The scope of the variable 'flags' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[170]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="207">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>107817</StartLine>
        <EndLine>107817</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:107817 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[171]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="208">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>108165</StartLine>
        <EndLine>108165</EndLine>
        <Explanation>The scope of the variable 'zVal' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zVal' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:108165 ****** Primary Bug Location
  The scope of the variable 'zVal' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[172]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="209">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>108167</StartLine>
        <EndLine>108167</EndLine>
        <Explanation>The scope of the variable 'zSep' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zSep' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:108167 ****** Primary Bug Location
  The scope of the variable 'zSep' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[173]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="210">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>108168</StartLine>
        <EndLine>108168</EndLine>
        <Explanation>The scope of the variable 'nVal' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nVal' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:108168 ****** Primary Bug Location
  The scope of the variable 'nVal' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[174]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="211">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>108168</StartLine>
        <EndLine>108168</EndLine>
        <Explanation>The scope of the variable 'nSep' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nSep' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:108168 ****** Primary Bug Location
  The scope of the variable 'nSep' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[175]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="212">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>108907</StartLine>
        <EndLine>108907</EndLine>
        <Explanation>The scope of the variable 'zColl' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zColl' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:108907 ****** Primary Bug Location
  The scope of the variable 'zColl' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[176]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="213">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>108992</StartLine>
        <EndLine>108992</EndLine>
        <Explanation>The scope of the variable 'pWInfo' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pWInfo' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:108992 ****** Primary Bug Location
  The scope of the variable 'pWInfo' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[177]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="214">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>109051</StartLine>
        <EndLine>109051</EndLine>
        <Explanation>The scope of the variable 'pEq' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pEq' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:109051 ****** Primary Bug Location
  The scope of the variable 'pEq' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[178]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="215">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>110123</StartLine>
        <EndLine>110123</EndLine>
        <Explanation>The scope of the variable 'pDb' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pDb' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:110123 ****** Primary Bug Location
  The scope of the variable 'pDb' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[179]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="216">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>110124</StartLine>
        <EndLine>110124</EndLine>
        <Explanation>The scope of the variable 'memId' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'memId' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:110124 ****** Primary Bug Location
  The scope of the variable 'memId' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[180]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="217">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>111388</StartLine>
        <EndLine>111388</EndLine>
        <Explanation>The scope of the variable 'x' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'x' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:111388 ****** Primary Bug Location
  The scope of the variable 'x' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[181]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="218">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>111837</StartLine>
        <EndLine>111837</EndLine>
        <Explanation>The scope of the variable 'addr2' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'addr2' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:111837 ****** Primary Bug Location
  The scope of the variable 'addr2' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[182]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="219">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>113629</StartLine>
        <EndLine>113629</EndLine>
        <Explanation>The scope of the variable 'rc' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'rc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:113629 ****** Primary Bug Location
  The scope of the variable 'rc' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[183]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="220">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>114477</StartLine>
        <EndLine>114477</EndLine>
        <Explanation>The scope of the variable 'buf' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'buf' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:114477 ****** Primary Bug Location
  The scope of the variable 'buf' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[184]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="221">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>114608</StartLine>
        <EndLine>114608</EndLine>
        <Explanation>The scope of the variable 'rc' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'rc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:114608 ****** Primary Bug Location
  The scope of the variable 'rc' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[185]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="222">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>114792</StartLine>
        <EndLine>114792</EndLine>
        <Explanation>The scope of the variable 'aOp' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'aOp' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:114792 ****** Primary Bug Location
  The scope of the variable 'aOp' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[186]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="223">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>115475</StartLine>
        <EndLine>115475</EndLine>
        <Explanation>The scope of the variable 'pTab' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pTab' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:115475 ****** Primary Bug Location
  The scope of the variable 'pTab' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[187]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="224">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>115511</StartLine>
        <EndLine>115511</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:115511 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[188]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="225">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>117911</StartLine>
        <EndLine>117911</EndLine>
        <Explanation>The scope of the variable 'p' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'p' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:117911 ****** Primary Bug Location
  The scope of the variable 'p' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[189]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="226">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>117994</StartLine>
        <EndLine>117994</EndLine>
        <Explanation>The scope of the variable 'iCol' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iCol' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:117994 ****** Primary Bug Location
  The scope of the variable 'iCol' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[190]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="227">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>118814</StartLine>
        <EndLine>118814</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:118814 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[191]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="228">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>118933</StartLine>
        <EndLine>118933</EndLine>
        <Explanation>The scope of the variable 'addrOnce' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'addrOnce' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:118933 ****** Primary Bug Location
  The scope of the variable 'addrOnce' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[192]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="229">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>119089</StartLine>
        <EndLine>119089</EndLine>
        <Explanation>The scope of the variable 'j' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'j' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:119089 ****** Primary Bug Location
  The scope of the variable 'j' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[193]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="230">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>119496</StartLine>
        <EndLine>119496</EndLine>
        <Explanation>The scope of the variable 'pColl' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pColl' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:119496 ****** Primary Bug Location
  The scope of the variable 'pColl' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[194]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="231">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>119498</StartLine>
        <EndLine>119498</EndLine>
        <Explanation>The scope of the variable 'p' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'p' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:119498 ****** Primary Bug Location
  The scope of the variable 'p' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[195]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="232">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>119511</StartLine>
        <EndLine>119511</EndLine>
        <Explanation>The scope of the variable 'n' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'n' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:119511 ****** Primary Bug Location
  The scope of the variable 'n' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[196]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="233">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>119613</StartLine>
        <EndLine>119613</EndLine>
        <Explanation>The scope of the variable 'v' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'v' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:119613 ****** Primary Bug Location
  The scope of the variable 'v' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[197]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="234">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>119614</StartLine>
        <EndLine>119614</EndLine>
        <Explanation>The scope of the variable 'iLimit' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iLimit' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:119614 ****** Primary Bug Location
  The scope of the variable 'iLimit' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[198]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="235">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>119615</StartLine>
        <EndLine>119615</EndLine>
        <Explanation>The scope of the variable 'iOffset' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iOffset' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:119615 ****** Primary Bug Location
  The scope of the variable 'iOffset' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[199]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="236">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>120566</StartLine>
        <EndLine>120566</EndLine>
        <Explanation>The scope of the variable 'j' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'j' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:120566 ****** Primary Bug Location
  The scope of the variable 'j' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[200]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="237">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>121590</StartLine>
        <EndLine>121590</EndLine>
        <Explanation>The scope of the variable 'pNew' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pNew' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:121590 ****** Primary Bug Location
  The scope of the variable 'pNew' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[201]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="238">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>122044</StartLine>
        <EndLine>122044</EndLine>
        <Explanation>The scope of the variable 'j' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'j' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:122044 ****** Primary Bug Location
  The scope of the variable 'j' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[202]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="239">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>122049</StartLine>
        <EndLine>122049</EndLine>
        <Explanation>The scope of the variable 'pExpr' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pExpr' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:122049 ****** Primary Bug Location
  The scope of the variable 'pExpr' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[203]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="240">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>122204</StartLine>
        <EndLine>122204</EndLine>
        <Explanation>The scope of the variable 'iDb' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iDb' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:122204 ****** Primary Bug Location
  The scope of the variable 'iDb' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[204]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="241">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>124516</StartLine>
        <EndLine>124516</EndLine>
        <Explanation>The scope of the variable 'buf' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'buf' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:124516 ****** Primary Bug Location
  The scope of the variable 'buf' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[205]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="242">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>124613</StartLine>
        <EndLine>124613</EndLine>
        <Explanation>The scope of the variable 'iDb' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iDb' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:124613 ****** Primary Bug Location
  The scope of the variable 'iDb' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[206]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="243">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>124755</StartLine>
        <EndLine>124755</EndLine>
        <Explanation>The scope of the variable 'pWhen' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pWhen' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:124755 ****** Primary Bug Location
  The scope of the variable 'pWhen' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[207]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="244">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>124760</StartLine>
        <EndLine>124760</EndLine>
        <Explanation>The scope of the variable 'iEndTrigger' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iEndTrigger' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:124760 ****** Primary Bug Location
  The scope of the variable 'iEndTrigger' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[208]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="245">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>127173</StartLine>
        <EndLine>127173</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:127173 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[209]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="246">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>127364</StartLine>
        <EndLine>127364</EndLine>
        <Explanation>The scope of the variable 'z' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'z' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:127364 ****** Primary Bug Location
  The scope of the variable 'z' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[210]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="247">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>129116</StartLine>
        <EndLine>129116</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:129116 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[211]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="248">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>129351</StartLine>
        <EndLine>129351</EndLine>
        <Explanation>The scope of the variable 'pOp' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pOp' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:129351 ****** Primary Bug Location
  The scope of the variable 'pOp' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[212]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="249">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>129993</StartLine>
        <EndLine>129993</EndLine>
        <Explanation>The scope of the variable 'jmp1' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'jmp1' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:129993 ****** Primary Bug Location
  The scope of the variable 'jmp1' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[213]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="250">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>130476</StartLine>
        <EndLine>130476</EndLine>
        <Explanation>The scope of the variable 'c' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'c' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:130476 ****** Primary Bug Location
  The scope of the variable 'c' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[214]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="251">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>130477</StartLine>
        <EndLine>130477</EndLine>
        <Explanation>The scope of the variable 'cnt' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'cnt' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:130477 ****** Primary Bug Location
  The scope of the variable 'cnt' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[215]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="252">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>130867</StartLine>
        <EndLine>130867</EndLine>
        <Explanation>The scope of the variable 'pAndTerm' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pAndTerm' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:130867 ****** Primary Bug Location
  The scope of the variable 'pAndTerm' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[216]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="253">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>130868</StartLine>
        <EndLine>130868</EndLine>
        <Explanation>The scope of the variable 'j' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'j' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:130868 ****** Primary Bug Location
  The scope of the variable 'j' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[217]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="254">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>131472</StartLine>
        <EndLine>131472</EndLine>
        <Explanation>The scope of the variable 'idxNew' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'idxNew' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:131472 ****** Primary Bug Location
  The scope of the variable 'idxNew' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[218]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="255">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>131474</StartLine>
        <EndLine>131474</EndLine>
        <Explanation>The scope of the variable 'pNewTerm' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pNewTerm' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:131474 ****** Primary Bug Location
  The scope of the variable 'pNewTerm' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[219]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="256">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>131702</StartLine>
        <EndLine>131702</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:131702 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[220]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="257">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>131746</StartLine>
        <EndLine>131746</EndLine>
        <Explanation>The scope of the variable 'pColRef' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pColRef' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:131746 ****** Primary Bug Location
  The scope of the variable 'pColRef' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[221]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="258">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>131747</StartLine>
        <EndLine>131747</EndLine>
        <Explanation>The scope of the variable 'pTerm' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pTerm' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:131747 ****** Primary Bug Location
  The scope of the variable 'pTerm' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[222]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="259">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>131966</StartLine>
        <EndLine>131966</EndLine>
        <Explanation>The scope of the variable 'iCur' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iCur' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:131966 ****** Primary Bug Location
  The scope of the variable 'iCur' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[223]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="260">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>131967</StartLine>
        <EndLine>131967</EndLine>
        <Explanation>The scope of the variable 'iColumn' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iColumn' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:131967 ****** Primary Bug Location
  The scope of the variable 'iColumn' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[224]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="261">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>135638</StartLine>
        <EndLine>135638</EndLine>
        <Explanation>The scope of the variable 'nTo' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nTo' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:135638 ****** Primary Bug Location
  The scope of the variable 'nTo' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[225]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="262">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>136013</StartLine>
        <EndLine>136013</EndLine>
        <Explanation>The scope of the variable 'j' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'j' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:136013 ****** Primary Bug Location
  The scope of the variable 'j' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[226]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="263">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>136690</StartLine>
        <EndLine>136690</EndLine>
        <Explanation>The scope of the variable 'addr' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'addr' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:136690 ****** Primary Bug Location
  The scope of the variable 'addr' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[227]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="264">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>136790</StartLine>
        <EndLine>136790</EndLine>
        <Explanation>The scope of the variable 'k' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'k' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:136790 ****** Primary Bug Location
  The scope of the variable 'k' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[228]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="265">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>136790</StartLine>
        <EndLine>136790</EndLine>
        <Explanation>The scope of the variable 'last' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'last' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:136790 ****** Primary Bug Location
  The scope of the variable 'last' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[229]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="266">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>138583</StartLine>
        <EndLine>138583</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:138583 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[230]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="267">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>140484</StartLine>
        <EndLine>140484</EndLine>
        <Explanation>The scope of the variable 'yyact' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'yyact' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:140484 ****** Primary Bug Location
  The scope of the variable 'yyact' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[231]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="268">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>140927</StartLine>
        <EndLine>140927</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:140927 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[232]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="269">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>140927</StartLine>
        <EndLine>140927</EndLine>
        <Explanation>The scope of the variable 'j' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'j' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:140927 ****** Primary Bug Location
  The scope of the variable 'j' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[233]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="270">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>140928</StartLine>
        <EndLine>140928</EndLine>
        <Explanation>The scope of the variable 'zKW' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zKW' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:140928 ****** Primary Bug Location
  The scope of the variable 'zKW' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[234]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="271">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>148011</StartLine>
        <EndLine>148011</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:148011 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[235]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="272">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>148210</StartLine>
        <EndLine>148210</EndLine>
        <Explanation>The scope of the variable 'zFree' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zFree' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:148210 ****** Primary Bug Location
  The scope of the variable 'zFree' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[236]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="273">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>148580</StartLine>
        <EndLine>148580</EndLine>
        <Explanation>The scope of the variable 'iOpt' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iOpt' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:148580 ****** Primary Bug Location
  The scope of the variable 'iOpt' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[237]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="274">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>149115</StartLine>
        <EndLine>149115</EndLine>
        <Explanation>The scope of the variable 'zSql' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zSql' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:149115 ****** Primary Bug Location
  The scope of the variable 'zSql' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[238]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="275">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>150364</StartLine>
        <EndLine>150364</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:150364 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[239]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="276">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>150570</StartLine>
        <EndLine>150570</EndLine>
        <Explanation>The scope of the variable 'zSql' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zSql' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:150570 ****** Primary Bug Location
  The scope of the variable 'zSql' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[240]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="277">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>152371</StartLine>
        <EndLine>152371</EndLine>
        <Explanation>The scope of the variable 'ii' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'ii' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:152371 ****** Primary Bug Location
  The scope of the variable 'ii' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[241]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="278">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>152438</StartLine>
        <EndLine>152438</EndLine>
        <Explanation>The scope of the variable 'nNew' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nNew' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:152438 ****** Primary Bug Location
  The scope of the variable 'nNew' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[242]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="279">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>154085</StartLine>
        <EndLine>154085</EndLine>
        <Explanation>The scope of the variable 'nByte' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nByte' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:154085 ****** Primary Bug Location
  The scope of the variable 'nByte' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[243]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="280">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>155423</StartLine>
        <EndLine>155423</EndLine>
        <Explanation>The scope of the variable 'count' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'count' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:155423 ****** Primary Bug Location
  The scope of the variable 'count' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[244]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="281">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>155424</StartLine>
        <EndLine>155424</EndLine>
        <Explanation>The scope of the variable 'xCompare' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'xCompare' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:155424 ****** Primary Bug Location
  The scope of the variable 'xCompare' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[245]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="282">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>155877</StartLine>
        <EndLine>155877</EndLine>
        <Explanation>The scope of the variable 'j' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'j' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:155877 ****** Primary Bug Location
  The scope of the variable 'j' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[246]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="283">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>157756</StartLine>
        <EndLine>157756</EndLine>
        <Explanation>The scope of the variable 'azSql' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'azSql' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:157756 ****** Primary Bug Location
  The scope of the variable 'azSql' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[247]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="284">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>158920</StartLine>
        <EndLine>158920</EndLine>
        <Explanation>The scope of the variable 'rc' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'rc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:158920 ****** Primary Bug Location
  The scope of the variable 'rc' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[248]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="285">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>158922</StartLine>
        <EndLine>158922</EndLine>
        <Explanation>The scope of the variable 'c' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'c' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:158922 ****** Primary Bug Location
  The scope of the variable 'c' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[249]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="286">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>160390</StartLine>
        <EndLine>160390</EndLine>
        <Explanation>The scope of the variable 'nByte' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nByte' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:160390 ****** Primary Bug Location
  The scope of the variable 'nByte' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[250]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="287">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>160564</StartLine>
        <EndLine>160564</EndLine>
        <Explanation>The scope of the variable 'iIdx' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iIdx' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:160564 ****** Primary Bug Location
  The scope of the variable 'iIdx' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[251]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="288">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>161907</StartLine>
        <EndLine>161907</EndLine>
        <Explanation>The scope of the variable 'nAlloc' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nAlloc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:161907 ****** Primary Bug Location
  The scope of the variable 'nAlloc' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[252]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="289">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>163675</StartLine>
        <EndLine>163675</EndLine>
        <Explanation>The scope of the variable 'iBestScore' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'iBestScore' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:163675 ****** Primary Bug Location
  The scope of the variable 'iBestScore' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[253]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="290">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>163676</StartLine>
        <EndLine>163676</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:163676 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[254]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="291">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>181728</StartLine>
        <EndLine>181728</EndLine>
        <Explanation>The scope of the variable 'pNode' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pNode' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:181728 ****** Primary Bug Location
  The scope of the variable 'pNode' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[255]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="292">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>182031</StartLine>
        <EndLine>182031</EndLine>
        <Explanation>The scope of the variable 'nKey' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nKey' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:182031 ****** Primary Bug Location
  The scope of the variable 'nKey' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[256]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="293">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>182032</StartLine>
        <EndLine>182032</EndLine>
        <Explanation>The scope of the variable 'zKey' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zKey' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:182032 ****** Primary Bug Location
  The scope of the variable 'zKey' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[257]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="294">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>182365</StartLine>
        <EndLine>182365</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:182365 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[258]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="295">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>182403</StartLine>
        <EndLine>182403</EndLine>
        <Explanation>The scope of the variable 'pNode' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pNode' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:182403 ****** Primary Bug Location
  The scope of the variable 'pNode' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[259]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="296">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>182404</StartLine>
        <EndLine>182404</EndLine>
        <Explanation>The scope of the variable 'zPath' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zPath' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:182404 ****** Primary Bug Location
  The scope of the variable 'zPath' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[260]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="297">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>182547</StartLine>
        <EndLine>182547</EndLine>
        <Explanation>The scope of the variable 'z' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'z' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:182547 ****** Primary Bug Location
  The scope of the variable 'z' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[261]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="298">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>182548</StartLine>
        <EndLine>182548</EndLine>
        <Explanation>The scope of the variable 'n' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'n' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:182548 ****** Primary Bug Location
  The scope of the variable 'n' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[262]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="299">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>182717</StartLine>
        <EndLine>182717</EndLine>
        <Explanation>The scope of the variable 'zPath' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zPath' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:182717 ****** Primary Bug Location
  The scope of the variable 'zPath' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[263]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="300">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>182815</StartLine>
        <EndLine>182815</EndLine>
        <Explanation>The scope of the variable 'z' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'z' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:182815 ****** Primary Bug Location
  The scope of the variable 'z' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[264]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="301">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>182816</StartLine>
        <EndLine>182816</EndLine>
        <Explanation>The scope of the variable 'n' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'n' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:182816 ****** Primary Bug Location
  The scope of the variable 'n' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[265]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="302">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>182880</StartLine>
        <EndLine>182880</EndLine>
        <Explanation>The scope of the variable 'pNew' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pNew' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:182880 ****** Primary Bug Location
  The scope of the variable 'pNew' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[266]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="303">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>204693</StartLine>
        <EndLine>204693</EndLine>
        <Explanation>The scope of the variable 'pNew' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pNew' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:204693 ****** Primary Bug Location
  The scope of the variable 'pNew' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[267]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="304">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>205540</StartLine>
        <EndLine>205540</EndLine>
        <Explanation>The scope of the variable 'zPrompt' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zPrompt' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:205540 ****** Primary Bug Location
  The scope of the variable 'zPrompt' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[268]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="305">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>205656</StartLine>
        <EndLine>205656</EndLine>
        <Explanation>The scope of the variable 'mid' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'mid' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:205656 ****** Primary Bug Location
  The scope of the variable 'mid' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[269]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="306">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>205656</StartLine>
        <EndLine>205656</EndLine>
        <Explanation>The scope of the variable 'c' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'c' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:205656 ****** Primary Bug Location
  The scope of the variable 'c' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[270]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="307">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>205700</StartLine>
        <EndLine>205700</EndLine>
        <Explanation>The scope of the variable 'aPrefix' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'aPrefix' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:205700 ****** Primary Bug Location
  The scope of the variable 'aPrefix' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[271]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="308">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>205708</StartLine>
        <EndLine>205708</EndLine>
        <Explanation>The scope of the variable 'i' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:205708 ****** Primary Bug Location
  The scope of the variable 'i' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[272]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="309">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>205821</StartLine>
        <EndLine>205821</EndLine>
        <Explanation>The scope of the variable 'C0' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'C0' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:205821 ****** Primary Bug Location
  The scope of the variable 'C0' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[273]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="310">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>205821</StartLine>
        <EndLine>205821</EndLine>
        <Explanation>The scope of the variable 'C1' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'C1' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:205821 ****** Primary Bug Location
  The scope of the variable 'C1' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[274]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="311">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>205821</StartLine>
        <EndLine>205821</EndLine>
        <Explanation>The scope of the variable 'C2' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'C2' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:205821 ****** Primary Bug Location
  The scope of the variable 'C2' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[275]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="312">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>205821</StartLine>
        <EndLine>205821</EndLine>
        <Explanation>The scope of the variable 'C3' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'C3' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:205821 ****** Primary Bug Location
  The scope of the variable 'C3' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[276]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="313">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>205821</StartLine>
        <EndLine>205821</EndLine>
        <Explanation>The scope of the variable 'C4' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'C4' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:205821 ****** Primary Bug Location
  The scope of the variable 'C4' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[277]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="314">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>205822</StartLine>
        <EndLine>205822</EndLine>
        <Explanation>The scope of the variable 'D0' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'D0' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:205822 ****** Primary Bug Location
  The scope of the variable 'D0' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[278]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="315">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>205822</StartLine>
        <EndLine>205822</EndLine>
        <Explanation>The scope of the variable 'D1' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'D1' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:205822 ****** Primary Bug Location
  The scope of the variable 'D1' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[279]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="316">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>205822</StartLine>
        <EndLine>205822</EndLine>
        <Explanation>The scope of the variable 'D2' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'D2' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:205822 ****** Primary Bug Location
  The scope of the variable 'D2' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[280]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="317">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>205822</StartLine>
        <EndLine>205822</EndLine>
        <Explanation>The scope of the variable 'D3' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'D3' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:205822 ****** Primary Bug Location
  The scope of the variable 'D3' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[281]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="318">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>205822</StartLine>
        <EndLine>205822</EndLine>
        <Explanation>The scope of the variable 'D4' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'D4' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:205822 ****** Primary Bug Location
  The scope of the variable 'D4' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[282]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="319">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>206324</StartLine>
        <EndLine>206324</EndLine>
        <Explanation>The scope of the variable 'nCol' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nCol' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:206324 ****** Primary Bug Location
  The scope of the variable 'nCol' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[283]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="320">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>206326</StartLine>
        <EndLine>206326</EndLine>
        <Explanation>The scope of the variable 'rc' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'rc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:206326 ****** Primary Bug Location
  The scope of the variable 'rc' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[284]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="321">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>206327</StartLine>
        <EndLine>206327</EndLine>
        <Explanation>The scope of the variable 'n' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'n' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:206327 ****** Primary Bug Location
  The scope of the variable 'n' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[285]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="322">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>206328</StartLine>
        <EndLine>206328</EndLine>
        <Explanation>The scope of the variable 'z' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'z' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:206328 ****** Primary Bug Location
  The scope of the variable 'z' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[286]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="323">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>206665</StartLine>
        <EndLine>206665</EndLine>
        <Explanation>The scope of the variable 'pNew' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'pNew' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:206665 ****** Primary Bug Location
  The scope of the variable 'pNew' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[287]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="324">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>207322</StartLine>
        <EndLine>207322</EndLine>
        <Explanation>The scope of the variable 'zBuf1' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zBuf1' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:207322 ****** Primary Bug Location
  The scope of the variable 'zBuf1' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[288]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="325">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>207322</StartLine>
        <EndLine>207322</EndLine>
        <Explanation>The scope of the variable 'zBuf2' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zBuf2' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:207322 ****** Primary Bug Location
  The scope of the variable 'zBuf2' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[289]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="326">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>207620</StartLine>
        <EndLine>207620</EndLine>
        <Explanation>The scope of the variable 'n' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'n' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:207620 ****** Primary Bug Location
  The scope of the variable 'n' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[290]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="327">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>207685</StartLine>
        <EndLine>207685</EndLine>
        <Explanation>The scope of the variable 'nParen' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nParen' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:207685 ****** Primary Bug Location
  The scope of the variable 'nParen' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[291]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="328">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>207686</StartLine>
        <EndLine>207686</EndLine>
        <Explanation>The scope of the variable 'cEnd' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'cEnd' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:207686 ****** Primary Bug Location
  The scope of the variable 'cEnd' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[292]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="329">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>207688</StartLine>
        <EndLine>207688</EndLine>
        <Explanation>The scope of the variable 'nLine' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nLine' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:207688 ****** Primary Bug Location
  The scope of the variable 'nLine' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[293]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="330">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>208049</StartLine>
        <EndLine>208049</EndLine>
        <Explanation>The scope of the variable 'z' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'z' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:208049 ****** Primary Bug Location
  The scope of the variable 'z' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[294]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="331">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>208554</StartLine>
        <EndLine>208554</EndLine>
        <Explanation>The scope of the variable 'zStmtSql' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zStmtSql' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:208554 ****** Primary Bug Location
  The scope of the variable 'zStmtSql' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[295]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="332">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>208805</StartLine>
        <EndLine>208805</EndLine>
        <Explanation>The scope of the variable 'rc' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'rc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:208805 ****** Primary Bug Location
  The scope of the variable 'rc' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[296]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="333">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>210197</StartLine>
        <EndLine>210197</EndLine>
        <Explanation>The scope of the variable 'zSql' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zSql' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:210197 ****** Primary Bug Location
  The scope of the variable 'zSql' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[297]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="334">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>210224</StartLine>
        <EndLine>210224</EndLine>
        <Explanation>The scope of the variable 'zGlobIPK' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'zGlobIPK' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:210224 ****** Primary Bug Location
  The scope of the variable 'zGlobIPK' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[298]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="335">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>212153</StartLine>
        <EndLine>212153</EndLine>
        <Explanation>The scope of the variable 'len' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'len' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:212153 ****** Primary Bug Location
  The scope of the variable 'len' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[299]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="336">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>212214</StartLine>
        <EndLine>212214</EndLine>
        <Explanation>The scope of the variable 'rc2' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'rc2' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:212214 ****** Primary Bug Location
  The scope of the variable 'rc2' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[300]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="337">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>213255</StartLine>
        <EndLine>213255</EndLine>
        <Explanation>The scope of the variable 'nHistory' can be reduced.</Explanation>
      </Location>
    </BugLocations>
    <CweId>398</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>variableScope</BugCode>
    <BugMessage>The scope of the variable 'nHistory' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:
void f(int x)
{
    int i = 0;
    if (x) {
        // it's safe to move 'int i = 0;' here
        for (int n = 0; n &lt; 10; ++n) {
            // it is possible but not safe to move 'int i = 0;' here
            do_something(&amp;i);
        }
    }
}
When you see this message it is always safe to reduce the variable scope 1 level.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:213255 ****** Primary Bug Location
  The scope of the variable 'nHistory' can be reduced.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[301]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="338">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>102305</StartLine>
        <EndLine>102305</EndLine>
        <Explanation>Size of pointer 'zExtra' used instead of size of its data.</Explanation>
      </Location>
    </BugLocations>
    <CweId>467</CweId>
    <BugGroup>warning</BugGroup>
    <BugCode>pointerSize</BugCode>
    <BugMessage>Size of pointer 'zExtra' used instead of size of its data. This is likely to lead to a buffer overflow. You probably intend to write 'sizeof(*zExtra)'.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:102305 ****** Primary Bug Location
  Size of pointer 'zExtra' used instead of size of its data.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[302]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="339">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>136270</StartLine>
        <EndLine>136270</EndLine>
        <Explanation>Suspicious code: sign conversion of - in calculation, even though - can have a negative value</Explanation>
      </Location>
    </BugLocations>
    <CweId>195</CweId>
    <BugGroup>warning</BugGroup>
    <BugCode>signConversion</BugCode>
    <BugMessage>Suspicious code: sign conversion of - in calculation, even though - can have a negative value</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[303]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="340">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>162292</StartLine>
        <EndLine>162292</EndLine>
        <Explanation>int result is assigned to long variable. If the variable is long to avoid loss of information, then you have loss of information.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>truncLongCastAssignment</BugCode>
    <BugMessage>int result is assigned to long variable. If the variable is long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example 'l = a * b;' =&gt; 'l = (long)a * b;'.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:162292 ****** Primary Bug Location
  int result is assigned to long variable. If the variable is long to avoid loss of information, then you have loss of information.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[304]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="341">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9818</StartLine>
        <EndLine>9818</EndLine>
        <Explanation>struct member 'sqlite3_rtree_geometry::pContext' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_geometry::pContext' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[305]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="342">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9819</StartLine>
        <EndLine>9819</EndLine>
        <Explanation>struct member 'sqlite3_rtree_geometry::nParam' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_geometry::nParam' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[306]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="343">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9820</StartLine>
        <EndLine>9820</EndLine>
        <Explanation>struct member 'sqlite3_rtree_geometry::aParam' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_geometry::aParam' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[307]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="344">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9822</StartLine>
        <EndLine>9822</EndLine>
        <Explanation>struct member 'sqlite3_rtree_geometry::xDelUser' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_geometry::xDelUser' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[308]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="345">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9850</StartLine>
        <EndLine>9850</EndLine>
        <Explanation>struct member 'sqlite3_rtree_query_info::pContext' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_query_info::pContext' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[309]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="346">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9851</StartLine>
        <EndLine>9851</EndLine>
        <Explanation>struct member 'sqlite3_rtree_query_info::nParam' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_query_info::nParam' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[310]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="347">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9852</StartLine>
        <EndLine>9852</EndLine>
        <Explanation>struct member 'sqlite3_rtree_query_info::aParam' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_query_info::aParam' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[311]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="348">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9854</StartLine>
        <EndLine>9854</EndLine>
        <Explanation>struct member 'sqlite3_rtree_query_info::xDelUser' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_query_info::xDelUser' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[312]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="349">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9855</StartLine>
        <EndLine>9855</EndLine>
        <Explanation>struct member 'sqlite3_rtree_query_info::aCoord' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_query_info::aCoord' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[313]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="350">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9856</StartLine>
        <EndLine>9856</EndLine>
        <Explanation>struct member 'sqlite3_rtree_query_info::anQueue' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_query_info::anQueue' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[314]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="351">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9857</StartLine>
        <EndLine>9857</EndLine>
        <Explanation>struct member 'sqlite3_rtree_query_info::nCoord' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_query_info::nCoord' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[315]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="352">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9859</StartLine>
        <EndLine>9859</EndLine>
        <Explanation>struct member 'sqlite3_rtree_query_info::mxLevel' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_query_info::mxLevel' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[316]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="353">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9861</StartLine>
        <EndLine>9861</EndLine>
        <Explanation>struct member 'sqlite3_rtree_query_info::rParentScore' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_query_info::rParentScore' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[317]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="354">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9862</StartLine>
        <EndLine>9862</EndLine>
        <Explanation>struct member 'sqlite3_rtree_query_info::eParentWithin' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_query_info::eParentWithin' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[318]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="355">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9863</StartLine>
        <EndLine>9863</EndLine>
        <Explanation>struct member 'sqlite3_rtree_query_info::eWithin' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_query_info::eWithin' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[319]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="356">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9864</StartLine>
        <EndLine>9864</EndLine>
        <Explanation>struct member 'sqlite3_rtree_query_info::rScore' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_query_info::rScore' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[320]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="357">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>9866</StartLine>
        <EndLine>9866</EndLine>
        <Explanation>struct member 'sqlite3_rtree_query_info::apSqlParam' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'sqlite3_rtree_query_info::apSqlParam' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[321]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="358">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11445</StartLine>
        <EndLine>11445</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xUserData' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xUserData' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[322]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="359">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11447</StartLine>
        <EndLine>11447</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xColumnCount' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xColumnCount' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[323]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="360">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11448</StartLine>
        <EndLine>11448</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xRowCount' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xRowCount' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[324]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="361">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11449</StartLine>
        <EndLine>11449</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xColumnTotalSize' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xColumnTotalSize' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[325]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="362">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11451</StartLine>
        <EndLine>11451</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xTokenize' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xTokenize' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[326]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="363">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11457</StartLine>
        <EndLine>11457</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xPhraseCount' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xPhraseCount' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[327]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="364">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11458</StartLine>
        <EndLine>11458</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xPhraseSize' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xPhraseSize' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[328]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="365">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11460</StartLine>
        <EndLine>11460</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xInstCount' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xInstCount' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[329]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="366">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11461</StartLine>
        <EndLine>11461</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xInst' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xInst' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[330]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="367">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11464</StartLine>
        <EndLine>11464</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xColumnText' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xColumnText' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[331]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="368">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11465</StartLine>
        <EndLine>11465</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xColumnSize' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xColumnSize' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[332]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="369">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11467</StartLine>
        <EndLine>11467</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xQueryPhrase' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xQueryPhrase' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[333]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="370">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11470</StartLine>
        <EndLine>11470</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xSetAuxdata' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xSetAuxdata' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[334]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="371">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11471</StartLine>
        <EndLine>11471</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xGetAuxdata' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xGetAuxdata' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[335]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="372">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11473</StartLine>
        <EndLine>11473</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xPhraseFirst' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xPhraseFirst' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[336]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="373">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11474</StartLine>
        <EndLine>11474</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xPhraseNext' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xPhraseNext' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[337]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="374">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11476</StartLine>
        <EndLine>11476</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xPhraseFirstColumn' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xPhraseFirstColumn' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[338]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="375">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11477</StartLine>
        <EndLine>11477</EndLine>
        <Explanation>struct member 'Fts5ExtensionApi::xPhraseNextColumn' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Fts5ExtensionApi::xPhraseNextColumn' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[339]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="376">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11681</StartLine>
        <EndLine>11681</EndLine>
        <Explanation>struct member 'fts5_tokenizer::xTokenize' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'fts5_tokenizer::xTokenize' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[340]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="377">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11718</StartLine>
        <EndLine>11718</EndLine>
        <Explanation>struct member 'fts5_api::xCreateTokenizer' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'fts5_api::xCreateTokenizer' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[341]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="378">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11727</StartLine>
        <EndLine>11727</EndLine>
        <Explanation>struct member 'fts5_api::xFindTokenizer' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'fts5_api::xFindTokenizer' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[342]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="379">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>11735</StartLine>
        <EndLine>11735</EndLine>
        <Explanation>struct member 'fts5_api::xCreateFunction' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'fts5_api::xCreateFunction' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[343]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="380">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>15169</StartLine>
        <EndLine>15169</EndLine>
        <Explanation>union member 'Anonymous5::notUsed1' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>union member 'Anonymous5::notUsed1' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[344]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="381">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>15977</StartLine>
        <EndLine>15977</EndLine>
        <Explanation>struct member 'IndexSample::anLt' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'IndexSample::anLt' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[345]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="382">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>17042</StartLine>
        <EndLine>17042</EndLine>
        <Explanation>struct member 'Sqlite3Config::mxStrlen' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Sqlite3Config::mxStrlen' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[346]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="383">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>17050</StartLine>
        <EndLine>17050</EndLine>
        <Explanation>struct member 'Sqlite3Config::pHeap' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Sqlite3Config::pHeap' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[347]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="384">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>17051</StartLine>
        <EndLine>17051</EndLine>
        <Explanation>struct member 'Sqlite3Config::nHeap' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Sqlite3Config::nHeap' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[348]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="385">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>17052</StartLine>
        <EndLine>17052</EndLine>
        <Explanation>struct member 'Sqlite3Config::mnReq' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Sqlite3Config::mnReq' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[349]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="386">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>17052</StartLine>
        <EndLine>17052</EndLine>
        <Explanation>struct member 'Sqlite3Config::mxReq' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Sqlite3Config::mxReq' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[350]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="387">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>17058</StartLine>
        <EndLine>17058</EndLine>
        <Explanation>struct member 'Sqlite3Config::mxParserStack' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'Sqlite3Config::mxParserStack' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[351]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="388">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>17124</StartLine>
        <EndLine>17124</EndLine>
        <Explanation>union member 'Anonymous13::pCCurHint' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>union member 'Anonymous13::pCCurHint' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[352]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="389">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>18832</StartLine>
        <EndLine>18832</EndLine>
        <Explanation>struct member 'ScanStatus::addrExplain' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'ScanStatus::addrExplain' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[353]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="390">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>18833</StartLine>
        <EndLine>18833</EndLine>
        <Explanation>struct member 'ScanStatus::addrLoop' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'ScanStatus::addrLoop' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[354]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="391">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>18834</StartLine>
        <EndLine>18834</EndLine>
        <Explanation>struct member 'ScanStatus::addrVisit' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'ScanStatus::addrVisit' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[355]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="392">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>18835</StartLine>
        <EndLine>18835</EndLine>
        <Explanation>struct member 'ScanStatus::iSelectID' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'ScanStatus::iSelectID' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[356]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="393">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>18836</StartLine>
        <EndLine>18836</EndLine>
        <Explanation>struct member 'ScanStatus::nEst' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'ScanStatus::nEst' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[357]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="394">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>18931</StartLine>
        <EndLine>18931</EndLine>
        <Explanation>struct member 'PreUpdate::aRecord' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'PreUpdate::aRecord' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[358]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="395">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>18934</StartLine>
        <EndLine>18934</EndLine>
        <Explanation>struct member 'PreUpdate::pNewUnpacked' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'PreUpdate::pNewUnpacked' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[359]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="396">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>18935</StartLine>
        <EndLine>18935</EndLine>
        <Explanation>struct member 'PreUpdate::iNewReg' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'PreUpdate::iNewReg' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[360]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="397">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>18936</StartLine>
        <EndLine>18936</EndLine>
        <Explanation>struct member 'PreUpdate::iKey1' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'PreUpdate::iKey1' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[361]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="398">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>18937</StartLine>
        <EndLine>18937</EndLine>
        <Explanation>struct member 'PreUpdate::iKey2' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'PreUpdate::iKey2' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[362]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="399">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>18938</StartLine>
        <EndLine>18938</EndLine>
        <Explanation>struct member 'PreUpdate::aNew' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'PreUpdate::aNew' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[363]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="400">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>18940</StartLine>
        <EndLine>18940</EndLine>
        <Explanation>struct member 'PreUpdate::pPk' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'PreUpdate::pPk' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[364]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="401">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>31230</StartLine>
        <EndLine>31230</EndLine>
        <Explanation>struct member 'vxworksFileId::zCanonicalName' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'vxworksFileId::zCanonicalName' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[365]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="402">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>207105</StartLine>
        <EndLine>207105</EndLine>
        <Explanation>struct member 'SavedModeInfo::valid' is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unusedStructMember</BugCode>
    <BugMessage>struct member 'SavedModeInfo::valid' is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[366]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="403">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>56463</StartLine>
        <EndLine>56463</EndLine>
        <Explanation>Variable 'buf' is assigned a value that is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unreadVariable</BugCode>
    <BugMessage>Variable 'buf' is assigned a value that is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[367]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="404">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>72589</StartLine>
        <EndLine>72589</EndLine>
        <Explanation>Variable 'buf' is assigned a value that is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unreadVariable</BugCode>
    <BugMessage>Variable 'buf' is assigned a value that is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[368]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="405">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>114480</StartLine>
        <EndLine>114480</EndLine>
        <Explanation>Variable 'buf' is assigned a value that is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unreadVariable</BugCode>
    <BugMessage>Variable 'buf' is assigned a value that is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[369]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="406">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>116544</StartLine>
        <EndLine>116544</EndLine>
        <Explanation>Variable 'cSep' is assigned a value that is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unreadVariable</BugCode>
    <BugMessage>Variable 'cSep' is assigned a value that is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[370]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="407">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>124519</StartLine>
        <EndLine>124519</EndLine>
        <Explanation>Variable 'buf' is assigned a value that is never used.</Explanation>
      </Location>
    </BugLocations>
    <BugGroup>style</BugGroup>
    <BugCode>unreadVariable</BugCode>
    <BugMessage>Variable 'buf' is assigned a value that is never used.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[371]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="408">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>32522</StartLine>
        <EndLine>32522</EndLine>
        <Explanation>Obsolescent function 'utime' called. It is recommended to use 'utimensat' instead.</Explanation>
      </Location>
    </BugLocations>
    <CweId>477</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>utimeCalled</BugCode>
    <BugMessage>Obsolescent function 'utime' called. It is recommended to use 'utimensat' instead.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[372]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="409">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>36664</StartLine>
        <EndLine>36664</EndLine>
        <Explanation>Obsolescent function 'usleep' called. It is recommended to use 'nanosleep' or 'setitimer' instead.</Explanation>
      </Location>
    </BugLocations>
    <CweId>477</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>usleepCalled</BugCode>
    <BugMessage>The obsolescent function 'usleep' is called. POSIX.1-2001 declares usleep() function obsolescent and POSIX.1-2008 removes it. It is recommended that new applications use the 'nanosleep' or 'setitimer' function.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:36664 ****** Primary Bug Location
  Obsolescent function 'usleep' called. It is recommended to use 'nanosleep' or 'setitimer' instead.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[373]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="410">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>212722</StartLine>
        <EndLine>212722</EndLine>
        <Explanation>Non reentrant function 'getpwuid' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwuid_r'.</Explanation>
      </Location>
    </BugLocations>
    <CweId>477</CweId>
    <BugGroup>portability</BugGroup>
    <BugCode>getpwuidCalled</BugCode>
    <BugMessage>Non reentrant function 'getpwuid' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwuid_r'.</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[374]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="411">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>25465</StartLine>
        <EndLine>25465</EndLine>
        <Explanation>Memory leak: pz</Explanation>
      </Location>
    </BugLocations>
    <CweId>401</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>memleak</BugCode>
    <BugMessage>Memory leak: pz</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[375]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="412">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>25500</StartLine>
        <EndLine>25500</EndLine>
        <Explanation>Memory leak: db</Explanation>
      </Location>
    </BugLocations>
    <CweId>401</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>memleak</BugCode>
    <BugMessage>Memory leak: db</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[376]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="413">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>209094</StartLine>
        <EndLine>209094</EndLine>
        <Explanation>Resource leak: in</Explanation>
      </Location>
    </BugLocations>
    <CweId>775</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>resourceLeak</BugCode>
    <BugMessage>Resource leak: in</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[377]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="414">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>20043</StartLine>
        <EndLine>20043</EndLine>
        <Explanation>Memory leak: pRc</Explanation>
      </Location>
    </BugLocations>
    <CweId>401</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>memleak</BugCode>
    <BugMessage>Memory leak: pRc</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[378]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="415">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>78422</StartLine>
        <EndLine>78422</EndLine>
        <Explanation>Memory leak: pStmt</Explanation>
      </Location>
    </BugLocations>
    <CweId>401</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>memleak</BugCode>
    <BugMessage>Memory leak: pStmt</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[379]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="416">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>111014</StartLine>
        <EndLine>111014</EndLine>
        <Explanation>Memory leak: aiChng</Explanation>
      </Location>
    </BugLocations>
    <CweId>401</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>memleak</BugCode>
    <BugMessage>Memory leak: aiChng</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[380]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="417">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>142794</StartLine>
        <EndLine>142794</EndLine>
        <Explanation>Memory leak: pRes</Explanation>
      </Location>
    </BugLocations>
    <CweId>401</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>memleak</BugCode>
    <BugMessage>Memory leak: pRes</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[381]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="418">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>144108</StartLine>
        <EndLine>144108</EndLine>
        <Explanation>Memory leak: pnLog</Explanation>
      </Location>
    </BugLocations>
    <CweId>401</CweId>
    <BugGroup>error</BugGroup>
    <BugCode>memleak</BugCode>
    <BugMessage>Memory leak: pnLog</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[382]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="419">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>87795</StartLine>
        <EndLine>87795</EndLine>
        <Explanation>Clarify calculation precedence for '&amp;' and '?'.</Explanation>
      </Location>
    </BugLocations>
    <CweId>783</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>clarifyCalculation</BugCode>
    <BugMessage>Suspicious calculation. Please use parentheses to clarify the code. The code ''a&amp;b?c:d'' should be written as either ''(a&amp;b)?c:d'' or ''a&amp;(b?c:d)''.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:87795 ****** Primary Bug Location
  Clarify calculation precedence for '&amp;' and '?'.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[383]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugInstance id="420">
    <Methods></Methods>
    <BugLocations>
      <Location id="1" primary="true">
        <SourceFile>pkg1/sqlite-3.21-buggy/sqlite3.c</SourceFile>
        <StartLine>101040</StartLine>
        <EndLine>101040</EndLine>
        <Explanation>Clarify calculation precedence for '&amp;' and '?'.</Explanation>
      </Location>
    </BugLocations>
    <CweId>783</CweId>
    <BugGroup>style</BugGroup>
    <BugCode>clarifyCalculation</BugCode>
    <BugMessage>Suspicious calculation. Please use parentheses to clarify the code. The code ''a&amp;b?c:d'' should be written as either ''(a&amp;b)?c:d'' or ''a&amp;(b?c:d)''.

Bug Path:

*** pkg1/sqlite-3.21-buggy/sqlite3.c:101040 ****** Primary Bug Location
  Clarify calculation precedence for '&amp;' and '?'.
</BugMessage>
    <BugTrace>
      <BuildId>3</BuildId>
      <AssessmentReportFile>assessment_report3.xml</AssessmentReportFile>
      <InstanceLocation>
        <Xpath>results/errors/error[384]</Xpath>
      </InstanceLocation>
    </BugTrace>
  </BugInstance>
  <BugSummary>
    <BugCategory group="error" code="arrayIndexOutOfBounds" count="1" bytes="812" />
    <BugCategory group="error" code="leakReturnValNotUsed" count="4" bytes="3270" />
    <BugCategory group="error" code="memleak" count="10" bytes="7161" />
    <BugCategory group="error" code="memleakOnRealloc" count="1" bytes="811" />
    <BugCategory group="error" code="resourceLeak" count="1" bytes="722" />
    <BugCategory group="portability" code="getpwuidCalled" count="1" bytes="982" />
    <BugCategory group="portability" code="invalidPointerCast" count="1" bytes="877" />
    <BugCategory group="style" code="clarifyCalculation" count="2" bytes="2085" />
    <BugCategory group="style" code="duplicateBreak" count="1" bytes="1077" />
    <BugCategory group="style" code="redundantAssignment" count="7" bytes="10331" />
    <BugCategory group="style" code="redundantCondition" count="1" bytes="853" />
    <BugCategory group="style" code="truncLongCastAssignment" count="1" bytes="1276" />
    <BugCategory group="style" code="unreadVariable" count="5" bytes="3873" />
    <BugCategory group="style" code="unusedStructMember" count="62" bytes="48596" />
    <BugCategory group="style" code="usleepCalled" count="1" bytes="1179" />
    <BugCategory group="style" code="utimeCalled" count="1" bytes="849" />
    <BugCategory group="style" code="variableScope" count="276" bytes="392869" />
    <BugCategory group="warning" code="nullPointer" count="8" bytes="6158" />
    <BugCategory group="warning" code="nullPointerRedundantCheck" count="33" bytes="51274" />
    <BugCategory group="warning" code="pointerSize" count="1" bytes="1044" />
    <BugCategory group="warning" code="signConversion" count="1" bytes="878" />
    <BugCategory group="warning" code="uselessAssignmentPtrArg" count="2" bytes="1796" />
  </BugSummary>
</AnalyzerReport>